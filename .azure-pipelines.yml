#--------------------------------------------------------------------------------------------------
# Windows
#--------------------------------------------------------------------------------------------------

jobs:
- job: win32
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh build.sh win32 all
      cd deploy
      7z a ../ALVR2.zip *
  - publish: $(System.DefaultWorkingDirectory)/ALVR2.zip
    artifact: ALVR2-win32

- job: win64
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh build.sh win64 all
      cd deploy
      7z a ../ALVR2.zip *
  - publish: $(System.DefaultWorkingDirectory)/ALVR2.zip
    artifact: ALVR2-win64

#--------------------------------------------------------------------------------------------------

- job: win32_msvc
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh build.sh win32-msvc all
      cd deploy
      7z a ../ALVR2.zip *
  - publish: $(System.DefaultWorkingDirectory)/ALVR2.zip
    artifact: ALVR2-win32-msvc

- job: win64_msvc
  pool:
    vmImage: "windows-latest"
  steps:
  - bash: |
      sh build.sh win64-msvc all
      cd deploy
      7z a ../ALVR2.zip *
  - publish: $(System.DefaultWorkingDirectory)/ALVR2.zip
    artifact: ALVR2-win64-msvc

#--------------------------------------------------------------------------------------------------
# macOS
#--------------------------------------------------------------------------------------------------

- job: macOS
  pool:
    vmImage: "macOS-latest"
  steps:
  - bash: |
      sh build.sh macOS all
      cd deploy
      zip -rq ../ALVR2.zip *
  - publish: $(System.DefaultWorkingDirectory)/ALVR2.zip
    artifact: ALVR2-macOS

#--------------------------------------------------------------------------------------------------
# Linux
#--------------------------------------------------------------------------------------------------

- job: linux32
  pool:
    vmImage: "ubuntu-latest"
  steps:
  - bash: |
      docker run -d --name ubuntu -v $PWD:/ALVR2 i386/ubuntu:18.04 tail -f /dev/null
      docker exec -t ubuntu bash -c "cd /ALVR2;
                                     apt-get update;
                                     apt-get -y install sudo curl zip git;
                                     sh build.sh linux all;
                                     cd deploy;
                                     zip -rq ../ALVR2.zip *"
  - publish: $(System.DefaultWorkingDirectory)/ALVR2.zip
    artifact: ALVR2-linux32

#--------------------------------------------------------------------------------------------------

- job: linux64
  pool:
    vmImage: "ubuntu-latest"
  steps:
  - bash: |
      docker run -d --name ubuntu -v $PWD:/ALVR2 amd64/ubuntu:18.04 tail -f /dev/null
      docker exec -t ubuntu bash -c "cd /ALVR2;
                                     apt-get update;
                                     apt-get -y install sudo curl zip git;
                                     sh build.sh linux all;
                                     cd deploy;
                                     zip -rq ../ALVR2.zip *"
  - publish: $(System.DefaultWorkingDirectory)/ALVR2.zip
    artifact: ALVR2-linux64
